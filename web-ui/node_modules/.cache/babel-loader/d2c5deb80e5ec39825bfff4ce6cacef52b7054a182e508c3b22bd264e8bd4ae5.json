{"ast":null,"code":"var _jsxFileName = \"D:\\\\XLR8\\\\Tech_Support_Ticket_Prioritizer\\\\web-ui\\\\src\\\\context\\\\ChatContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport axios from 'axios';\nimport { useAuth } from './AuthContext';\n\n// Create context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatContext = /*#__PURE__*/createContext();\n\n// Custom hook to use the chat context\nexport const useChat = () => {\n  _s();\n  return useContext(ChatContext);\n};\n_s(useChat, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const ChatProvider = ({\n  children\n}) => {\n  _s2();\n  const {\n    getAuthHeader\n  } = useAuth();\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Initial greeting message\n  useEffect(() => {\n    // Add initial bot message with slight delay to simulate bot thinking\n    const timer = setTimeout(() => {\n      setMessages([{\n        text: \"Hello! I'm your AI support assistant. How can I help you with your tech issue today?\",\n        sender: 'bot',\n        timestamp: new Date().toISOString()\n      }]);\n    }, 1000);\n    return () => clearTimeout(timer);\n  }, []);\n\n  // Send message to the chatbot\n  const sendMessage = async text => {\n    if (!text.trim()) return;\n\n    // Add user message to chat\n    const userMessage = {\n      text,\n      sender: 'user',\n      timestamp: new Date().toISOString()\n    };\n    setMessages(prev => [...prev, userMessage]);\n    setLoading(true);\n    setError(null);\n    try {\n      // Try to get response from API\n      let response;\n      try {\n        // In a production app, this would call your backend API with the trained model\n        response = await axios.post('/api/chat', {\n          message: text,\n          history: messages.slice(-10)\n        }, {\n          headers: getAuthHeader()\n        });\n      } catch (apiError) {\n        console.log('API error, using fallback response:', apiError);\n\n        // Fallback responses based on keywords in the message\n        let botResponse = \"I'm not sure I understand. Could you provide more details about your issue?\";\n\n        // Simple keyword matching for demo purposes\n        const lowerText = text.toLowerCase();\n        if (lowerText.includes('error') || lowerText.includes('bug') || lowerText.includes('issue')) {\n          botResponse = \"I understand you're experiencing an issue. Can you tell me what steps you've taken so far to resolve it?\";\n        } else if (lowerText.includes('install') || lowerText.includes('download')) {\n          botResponse = \"Are you having trouble with installation? Please make sure your system meets the minimum requirements and try running the installer as administrator.\";\n        } else if (lowerText.includes('password') || lowerText.includes('login') || lowerText.includes('account')) {\n          botResponse = \"For account-related issues, you can try resetting your password through the 'Forgot Password' link on the login page.\";\n        } else if (lowerText.includes('slow') || lowerText.includes('performance')) {\n          botResponse = \"Performance issues can be caused by many factors. Have you tried restarting your device and closing other applications?\";\n        } else if (lowerText.includes('thanks') || lowerText.includes('thank you')) {\n          botResponse = \"You're welcome! Is there anything else I can help you with?\";\n        } else if (lowerText.includes('hello') || lowerText.includes('hi')) {\n          botResponse = \"Hello! How can I assist you with your technical support needs today?\";\n        }\n\n        // Simulate API response\n        response = {\n          data: {\n            message: botResponse,\n            category: lowerText.includes('error') ? 'bug' : lowerText.includes('how') ? 'query' : 'general',\n            priority: lowerText.includes('urgent') ? 'high' : 'medium'\n          }\n        };\n      }\n\n      // Add bot response with slight delay to simulate thinking\n      setTimeout(() => {\n        const botMessage = {\n          text: response.data.message,\n          sender: 'bot',\n          timestamp: new Date().toISOString(),\n          category: response.data.category,\n          priority: response.data.priority\n        };\n        setMessages(prev => [...prev, botMessage]);\n        setLoading(false);\n      }, 1000);\n    } catch (err) {\n      console.error('Chat error:', err);\n      setError('Failed to get response. Please try again.');\n      setLoading(false);\n\n      // Add error message\n      setMessages(prev => [...prev, {\n        text: \"I'm sorry, I'm having trouble connecting to the server. Please try again or submit a support ticket.\",\n        sender: 'bot',\n        timestamp: new Date().toISOString(),\n        isError: true\n      }]);\n    }\n  };\n\n  // Clear chat history\n  const clearChat = () => {\n    setMessages([{\n      text: \"Hello! I'm your AI support assistant. How can I help you with your tech issue today?\",\n      sender: 'bot',\n      timestamp: new Date().toISOString()\n    }]);\n  };\n\n  // Context value\n  const value = {\n    messages,\n    loading,\n    error,\n    sendMessage,\n    clearChat\n  };\n  return /*#__PURE__*/_jsxDEV(ChatContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 5\n  }, this);\n};\n_s2(ChatProvider, \"rj2IPQKeuaSiehtdc8TOC5vOWzw=\", false, function () {\n  return [useAuth];\n});\n_c = ChatProvider;\nvar _c;\n$RefreshReg$(_c, \"ChatProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","axios","useAuth","jsxDEV","_jsxDEV","ChatContext","useChat","_s","ChatProvider","children","_s2","getAuthHeader","messages","setMessages","loading","setLoading","error","setError","timer","setTimeout","text","sender","timestamp","Date","toISOString","clearTimeout","sendMessage","trim","userMessage","prev","response","post","message","history","slice","headers","apiError","console","log","botResponse","lowerText","toLowerCase","includes","data","category","priority","botMessage","err","isError","clearChat","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/XLR8/Tech_Support_Ticket_Prioritizer/web-ui/src/context/ChatContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { useAuth } from './AuthContext';\r\n\r\n// Create context\r\nconst ChatContext = createContext();\r\n\r\n// Custom hook to use the chat context\r\nexport const useChat = () => useContext(ChatContext);\r\n\r\nexport const ChatProvider = ({ children }) => {\r\n  const { getAuthHeader } = useAuth();\r\n  const [messages, setMessages] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Initial greeting message\r\n  useEffect(() => {\r\n    // Add initial bot message with slight delay to simulate bot thinking\r\n    const timer = setTimeout(() => {\r\n      setMessages([\r\n        {\r\n          text: \"Hello! I'm your AI support assistant. How can I help you with your tech issue today?\",\r\n          sender: 'bot',\r\n          timestamp: new Date().toISOString()\r\n        }\r\n      ]);\r\n    }, 1000);\r\n    \r\n    return () => clearTimeout(timer);\r\n  }, []);\r\n\r\n  // Send message to the chatbot\r\n  const sendMessage = async (text) => {\r\n    if (!text.trim()) return;\r\n    \r\n    // Add user message to chat\r\n    const userMessage = {\r\n      text,\r\n      sender: 'user',\r\n      timestamp: new Date().toISOString()\r\n    };\r\n    \r\n    setMessages(prev => [...prev, userMessage]);\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      // Try to get response from API\r\n      let response;\r\n      try {\r\n        // In a production app, this would call your backend API with the trained model\r\n        response = await axios.post('/api/chat', \r\n          { message: text, history: messages.slice(-10) },\r\n          { headers: getAuthHeader() }\r\n        );\r\n      } catch (apiError) {\r\n        console.log('API error, using fallback response:', apiError);\r\n        \r\n        // Fallback responses based on keywords in the message\r\n        let botResponse = \"I'm not sure I understand. Could you provide more details about your issue?\";\r\n        \r\n        // Simple keyword matching for demo purposes\r\n        const lowerText = text.toLowerCase();\r\n        \r\n        if (lowerText.includes('error') || lowerText.includes('bug') || lowerText.includes('issue')) {\r\n          botResponse = \"I understand you're experiencing an issue. Can you tell me what steps you've taken so far to resolve it?\";\r\n        } else if (lowerText.includes('install') || lowerText.includes('download')) {\r\n          botResponse = \"Are you having trouble with installation? Please make sure your system meets the minimum requirements and try running the installer as administrator.\";\r\n        } else if (lowerText.includes('password') || lowerText.includes('login') || lowerText.includes('account')) {\r\n          botResponse = \"For account-related issues, you can try resetting your password through the 'Forgot Password' link on the login page.\";\r\n        } else if (lowerText.includes('slow') || lowerText.includes('performance')) {\r\n          botResponse = \"Performance issues can be caused by many factors. Have you tried restarting your device and closing other applications?\";\r\n        } else if (lowerText.includes('thanks') || lowerText.includes('thank you')) {\r\n          botResponse = \"You're welcome! Is there anything else I can help you with?\";\r\n        } else if (lowerText.includes('hello') || lowerText.includes('hi')) {\r\n          botResponse = \"Hello! How can I assist you with your technical support needs today?\";\r\n        }\r\n        \r\n        // Simulate API response\r\n        response = {\r\n          data: {\r\n            message: botResponse,\r\n            category: lowerText.includes('error') ? 'bug' : \r\n                     lowerText.includes('how') ? 'query' : 'general',\r\n            priority: lowerText.includes('urgent') ? 'high' : 'medium'\r\n          }\r\n        };\r\n      }\r\n      \r\n      // Add bot response with slight delay to simulate thinking\r\n      setTimeout(() => {\r\n        const botMessage = {\r\n          text: response.data.message,\r\n          sender: 'bot',\r\n          timestamp: new Date().toISOString(),\r\n          category: response.data.category,\r\n          priority: response.data.priority\r\n        };\r\n        \r\n        setMessages(prev => [...prev, botMessage]);\r\n        setLoading(false);\r\n      }, 1000);\r\n      \r\n    } catch (err) {\r\n      console.error('Chat error:', err);\r\n      setError('Failed to get response. Please try again.');\r\n      setLoading(false);\r\n      \r\n      // Add error message\r\n      setMessages(prev => [...prev, {\r\n        text: \"I'm sorry, I'm having trouble connecting to the server. Please try again or submit a support ticket.\",\r\n        sender: 'bot',\r\n        timestamp: new Date().toISOString(),\r\n        isError: true\r\n      }]);\r\n    }\r\n  };\r\n\r\n  // Clear chat history\r\n  const clearChat = () => {\r\n    setMessages([{\r\n      text: \"Hello! I'm your AI support assistant. How can I help you with your tech issue today?\",\r\n      sender: 'bot',\r\n      timestamp: new Date().toISOString()\r\n    }]);\r\n  };\r\n\r\n  // Context value\r\n  const value = {\r\n    messages,\r\n    loading,\r\n    error,\r\n    sendMessage,\r\n    clearChat\r\n  };\r\n\r\n  return (\r\n    <ChatContext.Provider value={value}>\r\n      {children}\r\n    </ChatContext.Provider>\r\n  );\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}