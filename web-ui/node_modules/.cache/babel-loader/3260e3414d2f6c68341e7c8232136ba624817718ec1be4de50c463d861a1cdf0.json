{"ast":null,"code":"var _jsxFileName = \"D:\\\\XLR8\\\\Tech_Support_Ticket_Prioritizer\\\\web-ui\\\\src\\\\context\\\\ChatContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport axios from 'axios';\nimport { useAuth } from './AuthContext';\n\n// Create context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatContext = /*#__PURE__*/createContext();\n\n// Custom hook to use the chat context\nexport const useChat = () => {\n  _s();\n  return useContext(ChatContext);\n};\n_s(useChat, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const ChatProvider = ({\n  children\n}) => {\n  _s2();\n  const {\n    getAuthHeader\n  } = useAuth();\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [connected, setConnected] = useState(true);\n\n  // Check if API is available\n  useEffect(() => {\n    const checkConnection = async () => {\n      try {\n        await axios.get('/api/health');\n        setConnected(true);\n      } catch (error) {\n        console.error('API connection error:', error);\n        setConnected(false);\n      }\n    };\n    checkConnection();\n    const interval = setInterval(checkConnection, 30000); // Check every 30 seconds\n\n    return () => clearInterval(interval);\n  }, []);\n\n  // Initial greeting message\n  useEffect(() => {\n    // Add initial bot message with slight delay to simulate bot thinking\n    const timer = setTimeout(() => {\n      setMessages([{\n        text: \"Hello! I'm your Syntax Samurai support assistant. How can I help you with your tech issue today?\",\n        sender: 'bot',\n        timestamp: new Date().toISOString()\n      }]);\n    }, 1000);\n    return () => clearTimeout(timer);\n  }, []);\n\n  // Send message to the chatbot\n  const sendMessage = async text => {\n    if (!text.trim()) return;\n\n    // Create message ID for tracking\n    const messageId = `msg_${Date.now()}`;\n\n    // Add user message to chat\n    const userMessage = {\n      id: messageId,\n      text,\n      sender: 'user',\n      timestamp: new Date().toISOString()\n    };\n    setMessages(prev => [...prev, userMessage]);\n    setLoading(true);\n    setError(null);\n    try {\n      // Get chat history for context\n      const history = messages.slice(-5).map(msg => ({\n        text: msg.text,\n        sender: msg.sender,\n        timestamp: msg.timestamp\n      }));\n\n      // Call the API with proper parameters\n      const response = await axios.post('/api/chat', {\n        message: text,\n        history: history,\n        language: 'en',\n        // Default to English\n        session_id: localStorage.getItem('chatSessionId') || `session_${Date.now()}`\n      });\n\n      // Store session ID for future requests\n      if (!localStorage.getItem('chatSessionId')) {\n        localStorage.setItem('chatSessionId', `session_${Date.now()}`);\n      }\n\n      // Process response\n      const botMessage = {\n        id: `resp_${Date.now()}`,\n        text: response.data.message,\n        sender: 'bot',\n        timestamp: new Date().toISOString(),\n        category: response.data.category,\n        priority: response.data.priority,\n        suggestions: response.data.suggestions\n      };\n\n      // Add typing indicator\n      setMessages(prev => [...prev, {\n        id: 'typing',\n        text: '...',\n        sender: 'bot',\n        isTyping: true,\n        timestamp: new Date().toISOString()\n      }]);\n\n      // Simulate bot typing delay\n      setTimeout(() => {\n        setMessages(prev => prev.filter(msg => !msg.isTyping).concat([botMessage]));\n        setLoading(false);\n\n        // If the response suggests creating a ticket for critical issues\n        if (response.data.create_ticket) {\n          setTimeout(() => {\n            setMessages(prev => [...prev, {\n              id: `suggestion_${Date.now()}`,\n              text: \"Would you like me to create a support ticket for this issue? It appears to be a high priority matter.\",\n              sender: 'bot',\n              isTicketSuggestion: true,\n              timestamp: new Date().toISOString()\n            }]);\n          }, 1000);\n        }\n      }, 1500);\n    } catch (err) {\n      console.error('Chat API error:', err);\n      setLoading(false);\n\n      // Remove typing indicator if present\n      setMessages(prev => prev.filter(msg => !msg.isTyping));\n\n      // Add fallback response message\n      const fallbackMessage = {\n        id: `error_${Date.now()}`,\n        text: connected ? \"I'm having trouble processing your request right now. Let me try a simpler response.\" : \"I'm currently experiencing connection issues. Please try again later or submit a support ticket.\",\n        sender: 'bot',\n        isError: true,\n        timestamp: new Date().toISOString()\n      };\n      setMessages(prev => [...prev, fallbackMessage]);\n\n      // If we have a connection but the API call failed, provide a basic response\n      if (connected) {\n        setTimeout(() => {\n          // Basic fallback logic\n          const lowerText = text.toLowerCase();\n          let responseText = \"I'm sorry, I couldn't process your request properly. Could you try rephrasing or providing more details?\";\n          if (lowerText.includes('error') || lowerText.includes('bug') || lowerText.includes('issue')) {\n            responseText = \"I understand you're experiencing an issue. Can you tell me what steps you've taken so far to resolve it?\";\n          } else if (lowerText.includes('install') || lowerText.includes('download')) {\n            responseText = \"Are you having trouble with installation? Please make sure your system meets the minimum requirements.\";\n          } else if (lowerText.includes('password') || lowerText.includes('login')) {\n            responseText = \"For account-related issues, you can try resetting your password through the 'Forgot Password' link.\";\n          }\n          setMessages(prev => [...prev, {\n            id: `fallback_${Date.now()}`,\n            text: responseText,\n            sender: 'bot',\n            isFallback: true,\n            timestamp: new Date().toISOString()\n          }]);\n        }, 1000);\n      }\n    }\n  };\n\n  // Clear chat history\n  const clearChat = () => {\n    setMessages([{\n      id: `welcome_${Date.now()}`,\n      text: \"Hello! I'm your Syntax Samurai support assistant. How can I help you with your tech issue today?\",\n      sender: 'bot',\n      timestamp: new Date().toISOString()\n    }]);\n    // Reset chat session\n    localStorage.removeItem('chatSessionId');\n  };\n\n  // Context value\n  const value = {\n    messages,\n    loading,\n    error,\n    connected,\n    sendMessage,\n    clearChat\n  };\n  return /*#__PURE__*/_jsxDEV(ChatContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 203,\n    columnNumber: 5\n  }, this);\n};\n_s2(ChatProvider, \"y/icR8dP2YDCLN4XWk7gFmxIvLw=\", false, function () {\n  return [useAuth];\n});\n_c = ChatProvider;\nvar _c;\n$RefreshReg$(_c, \"ChatProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","axios","useAuth","jsxDEV","_jsxDEV","ChatContext","useChat","_s","ChatProvider","children","_s2","getAuthHeader","messages","setMessages","loading","setLoading","error","setError","connected","setConnected","checkConnection","get","console","interval","setInterval","clearInterval","timer","setTimeout","text","sender","timestamp","Date","toISOString","clearTimeout","sendMessage","trim","messageId","now","userMessage","id","prev","history","slice","map","msg","response","post","message","language","session_id","localStorage","getItem","setItem","botMessage","data","category","priority","suggestions","isTyping","filter","concat","create_ticket","isTicketSuggestion","err","fallbackMessage","isError","lowerText","toLowerCase","responseText","includes","isFallback","clearChat","removeItem","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/XLR8/Tech_Support_Ticket_Prioritizer/web-ui/src/context/ChatContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { useAuth } from './AuthContext';\r\n\r\n// Create context\r\nconst ChatContext = createContext();\r\n\r\n// Custom hook to use the chat context\r\nexport const useChat = () => useContext(ChatContext);\r\n\r\nexport const ChatProvider = ({ children }) => {\r\n  const { getAuthHeader } = useAuth();\r\n  const [messages, setMessages] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [connected, setConnected] = useState(true);\r\n\r\n  // Check if API is available\r\n  useEffect(() => {\r\n    const checkConnection = async () => {\r\n      try {\r\n        await axios.get('/api/health');\r\n        setConnected(true);\r\n      } catch (error) {\r\n        console.error('API connection error:', error);\r\n        setConnected(false);\r\n      }\r\n    };\r\n\r\n    checkConnection();\r\n    const interval = setInterval(checkConnection, 30000); // Check every 30 seconds\r\n    \r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  // Initial greeting message\r\n  useEffect(() => {\r\n    // Add initial bot message with slight delay to simulate bot thinking\r\n    const timer = setTimeout(() => {\r\n      setMessages([\r\n        {\r\n          text: \"Hello! I'm your Syntax Samurai support assistant. How can I help you with your tech issue today?\",\r\n          sender: 'bot',\r\n          timestamp: new Date().toISOString()\r\n        }\r\n      ]);\r\n    }, 1000);\r\n    \r\n    return () => clearTimeout(timer);\r\n  }, []);\r\n\r\n  // Send message to the chatbot\r\n  const sendMessage = async (text) => {\r\n    if (!text.trim()) return;\r\n    \r\n    // Create message ID for tracking\r\n    const messageId = `msg_${Date.now()}`;\r\n    \r\n    // Add user message to chat\r\n    const userMessage = {\r\n      id: messageId,\r\n      text,\r\n      sender: 'user',\r\n      timestamp: new Date().toISOString()\r\n    };\r\n    \r\n    setMessages(prev => [...prev, userMessage]);\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      // Get chat history for context\r\n      const history = messages\r\n        .slice(-5)\r\n        .map(msg => ({\r\n          text: msg.text,\r\n          sender: msg.sender,\r\n          timestamp: msg.timestamp\r\n        }));\r\n      \r\n      // Call the API with proper parameters\r\n      const response = await axios.post('/api/chat', {\r\n        message: text,\r\n        history: history,\r\n        language: 'en',  // Default to English\r\n        session_id: localStorage.getItem('chatSessionId') || `session_${Date.now()}`\r\n      });\r\n      \r\n      // Store session ID for future requests\r\n      if (!localStorage.getItem('chatSessionId')) {\r\n        localStorage.setItem('chatSessionId', `session_${Date.now()}`);\r\n      }\r\n      \r\n      // Process response\r\n      const botMessage = {\r\n        id: `resp_${Date.now()}`,\r\n        text: response.data.message,\r\n        sender: 'bot',\r\n        timestamp: new Date().toISOString(),\r\n        category: response.data.category,\r\n        priority: response.data.priority,\r\n        suggestions: response.data.suggestions\r\n      };\r\n      \r\n      // Add typing indicator\r\n      setMessages(prev => [...prev, { \r\n        id: 'typing', \r\n        text: '...', \r\n        sender: 'bot', \r\n        isTyping: true,\r\n        timestamp: new Date().toISOString() \r\n      }]);\r\n      \r\n      // Simulate bot typing delay\r\n      setTimeout(() => {\r\n        setMessages(prev => prev.filter(msg => !msg.isTyping).concat([botMessage]));\r\n        setLoading(false);\r\n        \r\n        // If the response suggests creating a ticket for critical issues\r\n        if (response.data.create_ticket) {\r\n          setTimeout(() => {\r\n            setMessages(prev => [...prev, {\r\n              id: `suggestion_${Date.now()}`,\r\n              text: \"Would you like me to create a support ticket for this issue? It appears to be a high priority matter.\",\r\n              sender: 'bot',\r\n              isTicketSuggestion: true,\r\n              timestamp: new Date().toISOString()\r\n            }]);\r\n          }, 1000);\r\n        }\r\n      }, 1500);\r\n      \r\n    } catch (err) {\r\n      console.error('Chat API error:', err);\r\n      setLoading(false);\r\n      \r\n      // Remove typing indicator if present\r\n      setMessages(prev => prev.filter(msg => !msg.isTyping));\r\n      \r\n      // Add fallback response message\r\n      const fallbackMessage = {\r\n        id: `error_${Date.now()}`,\r\n        text: connected ? \r\n          \"I'm having trouble processing your request right now. Let me try a simpler response.\" :\r\n          \"I'm currently experiencing connection issues. Please try again later or submit a support ticket.\",\r\n        sender: 'bot',\r\n        isError: true,\r\n        timestamp: new Date().toISOString()\r\n      };\r\n      \r\n      setMessages(prev => [...prev, fallbackMessage]);\r\n      \r\n      // If we have a connection but the API call failed, provide a basic response\r\n      if (connected) {\r\n        setTimeout(() => {\r\n          // Basic fallback logic\r\n          const lowerText = text.toLowerCase();\r\n          let responseText = \"I'm sorry, I couldn't process your request properly. Could you try rephrasing or providing more details?\";\r\n          \r\n          if (lowerText.includes('error') || lowerText.includes('bug') || lowerText.includes('issue')) {\r\n            responseText = \"I understand you're experiencing an issue. Can you tell me what steps you've taken so far to resolve it?\";\r\n          } else if (lowerText.includes('install') || lowerText.includes('download')) {\r\n            responseText = \"Are you having trouble with installation? Please make sure your system meets the minimum requirements.\";\r\n          } else if (lowerText.includes('password') || lowerText.includes('login')) {\r\n            responseText = \"For account-related issues, you can try resetting your password through the 'Forgot Password' link.\";\r\n          }\r\n          \r\n          setMessages(prev => [...prev, {\r\n            id: `fallback_${Date.now()}`,\r\n            text: responseText,\r\n            sender: 'bot',\r\n            isFallback: true,\r\n            timestamp: new Date().toISOString()\r\n          }]);\r\n        }, 1000);\r\n      }\r\n    }\r\n  };\r\n\r\n  // Clear chat history\r\n  const clearChat = () => {\r\n    setMessages([{\r\n      id: `welcome_${Date.now()}`,\r\n      text: \"Hello! I'm your Syntax Samurai support assistant. How can I help you with your tech issue today?\",\r\n      sender: 'bot',\r\n      timestamp: new Date().toISOString()\r\n    }]);\r\n    // Reset chat session\r\n    localStorage.removeItem('chatSessionId');\r\n  };\r\n\r\n  // Context value\r\n  const value = {\r\n    messages,\r\n    loading,\r\n    error,\r\n    connected,\r\n    sendMessage,\r\n    clearChat\r\n  };\r\n\r\n  return (\r\n    <ChatContext.Provider value={value}>\r\n      {children}\r\n    </ChatContext.Provider>\r\n  );\r\n}; "],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AAC7E,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,OAAO,QAAQ,eAAe;;AAEvC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,WAAW,gBAAGR,aAAa,CAAC,CAAC;;AAEnC;AACA,OAAO,MAAMS,OAAO,GAAGA,CAAA;EAAAC,EAAA;EAAA,OAAMR,UAAU,CAACM,WAAW,CAAC;AAAA;AAACE,EAAA,CAAxCD,OAAO;AAEpB,OAAO,MAAME,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC5C,MAAM;IAAEC;EAAc,CAAC,GAAGT,OAAO,CAAC,CAAC;EACnC,MAAM,CAACU,QAAQ,EAAEC,WAAW,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACgB,OAAO,EAAEC,UAAU,CAAC,GAAGjB,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACkB,KAAK,EAAEC,QAAQ,CAAC,GAAGnB,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACoB,SAAS,EAAEC,YAAY,CAAC,GAAGrB,QAAQ,CAAC,IAAI,CAAC;;EAEhD;EACAE,SAAS,CAAC,MAAM;IACd,MAAMoB,eAAe,GAAG,MAAAA,CAAA,KAAY;MAClC,IAAI;QACF,MAAMnB,KAAK,CAACoB,GAAG,CAAC,aAAa,CAAC;QAC9BF,YAAY,CAAC,IAAI,CAAC;MACpB,CAAC,CAAC,OAAOH,KAAK,EAAE;QACdM,OAAO,CAACN,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;QAC7CG,YAAY,CAAC,KAAK,CAAC;MACrB;IACF,CAAC;IAEDC,eAAe,CAAC,CAAC;IACjB,MAAMG,QAAQ,GAAGC,WAAW,CAACJ,eAAe,EAAE,KAAK,CAAC,CAAC,CAAC;;IAEtD,OAAO,MAAMK,aAAa,CAACF,QAAQ,CAAC;EACtC,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAvB,SAAS,CAAC,MAAM;IACd;IACA,MAAM0B,KAAK,GAAGC,UAAU,CAAC,MAAM;MAC7Bd,WAAW,CAAC,CACV;QACEe,IAAI,EAAE,kGAAkG;QACxGC,MAAM,EAAE,KAAK;QACbC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;MACpC,CAAC,CACF,CAAC;IACJ,CAAC,EAAE,IAAI,CAAC;IAER,OAAO,MAAMC,YAAY,CAACP,KAAK,CAAC;EAClC,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMQ,WAAW,GAAG,MAAON,IAAI,IAAK;IAClC,IAAI,CAACA,IAAI,CAACO,IAAI,CAAC,CAAC,EAAE;;IAElB;IACA,MAAMC,SAAS,GAAG,OAAOL,IAAI,CAACM,GAAG,CAAC,CAAC,EAAE;;IAErC;IACA,MAAMC,WAAW,GAAG;MAClBC,EAAE,EAAEH,SAAS;MACbR,IAAI;MACJC,MAAM,EAAE,MAAM;MACdC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACpC,CAAC;IAEDnB,WAAW,CAAC2B,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAEF,WAAW,CAAC,CAAC;IAC3CvB,UAAU,CAAC,IAAI,CAAC;IAChBE,QAAQ,CAAC,IAAI,CAAC;IAEd,IAAI;MACF;MACA,MAAMwB,OAAO,GAAG7B,QAAQ,CACrB8B,KAAK,CAAC,CAAC,CAAC,CAAC,CACTC,GAAG,CAACC,GAAG,KAAK;QACXhB,IAAI,EAAEgB,GAAG,CAAChB,IAAI;QACdC,MAAM,EAAEe,GAAG,CAACf,MAAM;QAClBC,SAAS,EAAEc,GAAG,CAACd;MACjB,CAAC,CAAC,CAAC;;MAEL;MACA,MAAMe,QAAQ,GAAG,MAAM5C,KAAK,CAAC6C,IAAI,CAAC,WAAW,EAAE;QAC7CC,OAAO,EAAEnB,IAAI;QACba,OAAO,EAAEA,OAAO;QAChBO,QAAQ,EAAE,IAAI;QAAG;QACjBC,UAAU,EAAEC,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC,IAAI,WAAWpB,IAAI,CAACM,GAAG,CAAC,CAAC;MAC5E,CAAC,CAAC;;MAEF;MACA,IAAI,CAACa,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC,EAAE;QAC1CD,YAAY,CAACE,OAAO,CAAC,eAAe,EAAE,WAAWrB,IAAI,CAACM,GAAG,CAAC,CAAC,EAAE,CAAC;MAChE;;MAEA;MACA,MAAMgB,UAAU,GAAG;QACjBd,EAAE,EAAE,QAAQR,IAAI,CAACM,GAAG,CAAC,CAAC,EAAE;QACxBT,IAAI,EAAEiB,QAAQ,CAACS,IAAI,CAACP,OAAO;QAC3BlB,MAAM,EAAE,KAAK;QACbC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;QACnCuB,QAAQ,EAAEV,QAAQ,CAACS,IAAI,CAACC,QAAQ;QAChCC,QAAQ,EAAEX,QAAQ,CAACS,IAAI,CAACE,QAAQ;QAChCC,WAAW,EAAEZ,QAAQ,CAACS,IAAI,CAACG;MAC7B,CAAC;;MAED;MACA5C,WAAW,CAAC2B,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAE;QAC5BD,EAAE,EAAE,QAAQ;QACZX,IAAI,EAAE,KAAK;QACXC,MAAM,EAAE,KAAK;QACb6B,QAAQ,EAAE,IAAI;QACd5B,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;MACpC,CAAC,CAAC,CAAC;;MAEH;MACAL,UAAU,CAAC,MAAM;QACfd,WAAW,CAAC2B,IAAI,IAAIA,IAAI,CAACmB,MAAM,CAACf,GAAG,IAAI,CAACA,GAAG,CAACc,QAAQ,CAAC,CAACE,MAAM,CAAC,CAACP,UAAU,CAAC,CAAC,CAAC;QAC3EtC,UAAU,CAAC,KAAK,CAAC;;QAEjB;QACA,IAAI8B,QAAQ,CAACS,IAAI,CAACO,aAAa,EAAE;UAC/BlC,UAAU,CAAC,MAAM;YACfd,WAAW,CAAC2B,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAE;cAC5BD,EAAE,EAAE,cAAcR,IAAI,CAACM,GAAG,CAAC,CAAC,EAAE;cAC9BT,IAAI,EAAE,uGAAuG;cAC7GC,MAAM,EAAE,KAAK;cACbiC,kBAAkB,EAAE,IAAI;cACxBhC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;YACpC,CAAC,CAAC,CAAC;UACL,CAAC,EAAE,IAAI,CAAC;QACV;MACF,CAAC,EAAE,IAAI,CAAC;IAEV,CAAC,CAAC,OAAO+B,GAAG,EAAE;MACZzC,OAAO,CAACN,KAAK,CAAC,iBAAiB,EAAE+C,GAAG,CAAC;MACrChD,UAAU,CAAC,KAAK,CAAC;;MAEjB;MACAF,WAAW,CAAC2B,IAAI,IAAIA,IAAI,CAACmB,MAAM,CAACf,GAAG,IAAI,CAACA,GAAG,CAACc,QAAQ,CAAC,CAAC;;MAEtD;MACA,MAAMM,eAAe,GAAG;QACtBzB,EAAE,EAAE,SAASR,IAAI,CAACM,GAAG,CAAC,CAAC,EAAE;QACzBT,IAAI,EAAEV,SAAS,GACb,sFAAsF,GACtF,kGAAkG;QACpGW,MAAM,EAAE,KAAK;QACboC,OAAO,EAAE,IAAI;QACbnC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;MACpC,CAAC;MAEDnB,WAAW,CAAC2B,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAEwB,eAAe,CAAC,CAAC;;MAE/C;MACA,IAAI9C,SAAS,EAAE;QACbS,UAAU,CAAC,MAAM;UACf;UACA,MAAMuC,SAAS,GAAGtC,IAAI,CAACuC,WAAW,CAAC,CAAC;UACpC,IAAIC,YAAY,GAAG,0GAA0G;UAE7H,IAAIF,SAAS,CAACG,QAAQ,CAAC,OAAO,CAAC,IAAIH,SAAS,CAACG,QAAQ,CAAC,KAAK,CAAC,IAAIH,SAAS,CAACG,QAAQ,CAAC,OAAO,CAAC,EAAE;YAC3FD,YAAY,GAAG,0GAA0G;UAC3H,CAAC,MAAM,IAAIF,SAAS,CAACG,QAAQ,CAAC,SAAS,CAAC,IAAIH,SAAS,CAACG,QAAQ,CAAC,UAAU,CAAC,EAAE;YAC1ED,YAAY,GAAG,wGAAwG;UACzH,CAAC,MAAM,IAAIF,SAAS,CAACG,QAAQ,CAAC,UAAU,CAAC,IAAIH,SAAS,CAACG,QAAQ,CAAC,OAAO,CAAC,EAAE;YACxED,YAAY,GAAG,qGAAqG;UACtH;UAEAvD,WAAW,CAAC2B,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAE;YAC5BD,EAAE,EAAE,YAAYR,IAAI,CAACM,GAAG,CAAC,CAAC,EAAE;YAC5BT,IAAI,EAAEwC,YAAY;YAClBvC,MAAM,EAAE,KAAK;YACbyC,UAAU,EAAE,IAAI;YAChBxC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;UACpC,CAAC,CAAC,CAAC;QACL,CAAC,EAAE,IAAI,CAAC;MACV;IACF;EACF,CAAC;;EAED;EACA,MAAMuC,SAAS,GAAGA,CAAA,KAAM;IACtB1D,WAAW,CAAC,CAAC;MACX0B,EAAE,EAAE,WAAWR,IAAI,CAACM,GAAG,CAAC,CAAC,EAAE;MAC3BT,IAAI,EAAE,kGAAkG;MACxGC,MAAM,EAAE,KAAK;MACbC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACpC,CAAC,CAAC,CAAC;IACH;IACAkB,YAAY,CAACsB,UAAU,CAAC,eAAe,CAAC;EAC1C,CAAC;;EAED;EACA,MAAMC,KAAK,GAAG;IACZ7D,QAAQ;IACRE,OAAO;IACPE,KAAK;IACLE,SAAS;IACTgB,WAAW;IACXqC;EACF,CAAC;EAED,oBACEnE,OAAA,CAACC,WAAW,CAACqE,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAhE,QAAA,EAChCA;EAAQ;IAAAkE,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACpE,GAAA,CApMWF,YAAY;EAAA,QACGN,OAAO;AAAA;AAAA6E,EAAA,GADtBvE,YAAY;AAAA,IAAAuE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}