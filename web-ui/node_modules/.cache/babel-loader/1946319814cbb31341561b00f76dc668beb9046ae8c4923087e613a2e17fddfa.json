{"ast":null,"code":"var _jsxFileName = \"D:\\\\XLR8\\\\Tech_Support_Ticket_Prioritizer\\\\web-ui\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\n// Create context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// Custom hook to use the auth context\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Check if user is authenticated on mount\n  useEffect(() => {\n    // Check localStorage for token\n    const token = localStorage.getItem('auth_token');\n    const userData = localStorage.getItem('auth_user');\n    if (token && userData) {\n      try {\n        const parsedUser = JSON.parse(userData);\n        setUser(parsedUser);\n        setIsAuthenticated(true);\n      } catch (err) {\n        // Invalid user data, clear it\n        localStorage.removeItem('auth_token');\n        localStorage.removeItem('auth_user');\n      }\n    }\n  }, []);\n\n  // Hard-coded admin credentials - in a real app, these would be stored in a database\n  // and passwords would be hashed\n  const SYSTEM_ADMINS = [{\n    id: 'admin001',\n    name: 'System Admin',\n    password: 'SysAdm!n123',\n    role: 'admin'\n  }, {\n    id: 'support001',\n    name: 'Support Manager',\n    password: 'Supp0rt!23',\n    role: 'manager'\n  }];\n\n  // Login function\n  const login = async (userId, password) => {\n    setLoading(true);\n    setError(null);\n    try {\n      // In a real app, this would make an API call to verify credentials\n      // For demonstration, we'll check against our system-generated admin list\n      const admin = SYSTEM_ADMINS.find(a => a.id === userId && a.password === password);\n      if (!admin) {\n        throw new Error('Invalid credentials');\n      }\n\n      // Create a session token (in a real app, this would come from the server)\n      const token = btoa(`${admin.id}:${Date.now()}`);\n\n      // Store authentication data\n      localStorage.setItem('auth_token', token);\n\n      // Create a safe user object (without password)\n      const safeUser = {\n        id: admin.id,\n        name: admin.name,\n        role: admin.role\n      };\n\n      // Save user data\n      localStorage.setItem('auth_user', JSON.stringify(safeUser));\n\n      // Update state\n      setUser(safeUser);\n      setIsAuthenticated(true);\n      return true;\n    } catch (err) {\n      setError(err.message || 'Authentication failed');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Logout function\n  const logout = () => {\n    // Clear auth data\n    localStorage.removeItem('auth_token');\n    localStorage.removeItem('auth_user');\n\n    // Update state\n    setUser(null);\n    setIsAuthenticated(false);\n  };\n\n  // Generate a system admin account (in a real app, this would be an admin-only function)\n  const generateAdminAccount = (name, role = 'admin') => {\n    // Generate a unique ID based on timestamp and random string\n    const uniqueId = `admin${Date.now().toString(36)}${Math.random().toString(36).substr(2, 5)}`;\n\n    // Generate a secure password with uppercase, lowercase, numbers, and special characters\n    const generatePassword = () => {\n      const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*';\n      let password = '';\n      for (let i = 0; i < 12; i++) {\n        password += chars.charAt(Math.floor(Math.random() * chars.length));\n      }\n      return password;\n    };\n    const password = generatePassword();\n\n    // Create the new admin (in a real app, this would be saved to a database)\n    const newAdmin = {\n      id: uniqueId,\n      name,\n      password,\n      role\n    };\n\n    // For demo purposes, we'll just log it to console\n    console.log('Generated new admin:', {\n      ...newAdmin,\n      password: '******'\n    });\n    console.log('Credentials for login:');\n    console.log(`Admin ID: ${newAdmin.id}`);\n    console.log(`Password: ${password}`);\n    return {\n      id: newAdmin.id,\n      name: newAdmin.name,\n      role: newAdmin.role,\n      password // Only returned for demo purposes\n    };\n  };\n\n  // Function to get auth header for API requests\n  const getAuthHeader = () => {\n    const token = localStorage.getItem('auth_token');\n    return token ? {\n      Authorization: `Bearer ${token}`\n    } : {};\n  };\n\n  // Context value\n  const value = {\n    isAuthenticated,\n    user,\n    loading,\n    error,\n    login,\n    logout,\n    generateAdminAccount,\n    getAuthHeader\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"Gnvi4J9qgHZsSXCwYatRFAm3nVM=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","useNavigate","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","isAuthenticated","setIsAuthenticated","user","setUser","loading","setLoading","error","setError","token","localStorage","getItem","userData","parsedUser","JSON","parse","err","removeItem","SYSTEM_ADMINS","id","name","password","role","login","userId","admin","find","a","Error","btoa","Date","now","setItem","safeUser","stringify","message","logout","generateAdminAccount","uniqueId","toString","Math","random","substr","generatePassword","chars","i","charAt","floor","length","newAdmin","console","log","getAuthHeader","Authorization","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/XLR8/Tech_Support_Ticket_Prioritizer/web-ui/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\n// Create context\r\nconst AuthContext = createContext();\r\n\r\n// Custom hook to use the auth context\r\nexport const useAuth = () => useContext(AuthContext);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Check if user is authenticated on mount\r\n  useEffect(() => {\r\n    // Check localStorage for token\r\n    const token = localStorage.getItem('auth_token');\r\n    const userData = localStorage.getItem('auth_user');\r\n    \r\n    if (token && userData) {\r\n      try {\r\n        const parsedUser = JSON.parse(userData);\r\n        setUser(parsedUser);\r\n        setIsAuthenticated(true);\r\n      } catch (err) {\r\n        // Invalid user data, clear it\r\n        localStorage.removeItem('auth_token');\r\n        localStorage.removeItem('auth_user');\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  // Hard-coded admin credentials - in a real app, these would be stored in a database\r\n  // and passwords would be hashed\r\n  const SYSTEM_ADMINS = [\r\n    { id: 'admin001', name: 'System Admin', password: 'SysAdm!n123', role: 'admin' },\r\n    { id: 'support001', name: 'Support Manager', password: 'Supp0rt!23', role: 'manager' }\r\n  ];\r\n\r\n  // Login function\r\n  const login = async (userId, password) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      // In a real app, this would make an API call to verify credentials\r\n      // For demonstration, we'll check against our system-generated admin list\r\n      const admin = SYSTEM_ADMINS.find(a => a.id === userId && a.password === password);\r\n      \r\n      if (!admin) {\r\n        throw new Error('Invalid credentials');\r\n      }\r\n      \r\n      // Create a session token (in a real app, this would come from the server)\r\n      const token = btoa(`${admin.id}:${Date.now()}`);\r\n      \r\n      // Store authentication data\r\n      localStorage.setItem('auth_token', token);\r\n      \r\n      // Create a safe user object (without password)\r\n      const safeUser = {\r\n        id: admin.id,\r\n        name: admin.name,\r\n        role: admin.role\r\n      };\r\n      \r\n      // Save user data\r\n      localStorage.setItem('auth_user', JSON.stringify(safeUser));\r\n      \r\n      // Update state\r\n      setUser(safeUser);\r\n      setIsAuthenticated(true);\r\n      \r\n      return true;\r\n    } catch (err) {\r\n      setError(err.message || 'Authentication failed');\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Logout function\r\n  const logout = () => {\r\n    // Clear auth data\r\n    localStorage.removeItem('auth_token');\r\n    localStorage.removeItem('auth_user');\r\n    \r\n    // Update state\r\n    setUser(null);\r\n    setIsAuthenticated(false);\r\n  };\r\n\r\n  // Generate a system admin account (in a real app, this would be an admin-only function)\r\n  const generateAdminAccount = (name, role = 'admin') => {\r\n    // Generate a unique ID based on timestamp and random string\r\n    const uniqueId = `admin${Date.now().toString(36)}${Math.random().toString(36).substr(2, 5)}`;\r\n    \r\n    // Generate a secure password with uppercase, lowercase, numbers, and special characters\r\n    const generatePassword = () => {\r\n      const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*';\r\n      let password = '';\r\n      for (let i = 0; i < 12; i++) {\r\n        password += chars.charAt(Math.floor(Math.random() * chars.length));\r\n      }\r\n      return password;\r\n    };\r\n    \r\n    const password = generatePassword();\r\n    \r\n    // Create the new admin (in a real app, this would be saved to a database)\r\n    const newAdmin = {\r\n      id: uniqueId,\r\n      name,\r\n      password,\r\n      role\r\n    };\r\n    \r\n    // For demo purposes, we'll just log it to console\r\n    console.log('Generated new admin:', { ...newAdmin, password: '******' });\r\n    console.log('Credentials for login:');\r\n    console.log(`Admin ID: ${newAdmin.id}`);\r\n    console.log(`Password: ${password}`);\r\n    \r\n    return {\r\n      id: newAdmin.id,\r\n      name: newAdmin.name,\r\n      role: newAdmin.role,\r\n      password // Only returned for demo purposes\r\n    };\r\n  };\r\n\r\n  // Function to get auth header for API requests\r\n  const getAuthHeader = () => {\r\n    const token = localStorage.getItem('auth_token');\r\n    return token ? { Authorization: `Bearer ${token}` } : {};\r\n  };\r\n\r\n  // Context value\r\n  const value = {\r\n    isAuthenticated,\r\n    user,\r\n    loading,\r\n    error,\r\n    login,\r\n    logout,\r\n    generateAdminAccount,\r\n    getAuthHeader\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}