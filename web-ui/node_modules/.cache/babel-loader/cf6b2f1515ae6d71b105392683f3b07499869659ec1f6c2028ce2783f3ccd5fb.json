{"ast":null,"code":"var _jsxFileName = \"D:\\\\XLR8\\\\Tech_Support_Ticket_Prioritizer\\\\web-ui\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\n// Create context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// Custom hook to use the auth context\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Check if user is authenticated on mount\n  useEffect(() => {\n    // Check localStorage for token\n    const token = localStorage.getItem('auth_token');\n    const userData = localStorage.getItem('auth_user');\n    if (token && userData) {\n      try {\n        const parsedUser = JSON.parse(userData);\n        setUser(parsedUser);\n        setIsAuthenticated(true);\n      } catch (err) {\n        // Invalid user data, clear it\n        localStorage.removeItem('auth_token');\n        localStorage.removeItem('auth_user');\n      }\n    }\n  }, []);\n\n  // Special admin credentials\n  const ADMIN_EMAIL = 'syntax@team.com';\n  const ADMIN_PASSWORD = '12345';\n\n  // Login function\n  const login = async (email, password) => {\n    setLoading(true);\n    setError(null);\n    try {\n      // Check for admin login first\n      if (email === ADMIN_EMAIL && password === ADMIN_PASSWORD) {\n        // Admin login successful\n        const adminUser = {\n          id: 'admin001',\n          name: 'Syntax Admin',\n          role: 'admin',\n          email: ADMIN_EMAIL\n        };\n\n        // Create a session token\n        const token = btoa(`${adminUser.id}:${Date.now()}`);\n\n        // Store authentication data\n        localStorage.setItem('auth_token', token);\n        localStorage.setItem('auth_user', JSON.stringify(adminUser));\n\n        // Update state\n        setUser(adminUser);\n        setIsAuthenticated(true);\n        return true;\n      }\n\n      // Check for regular users in database (localStorage in this demo)\n      const usersJSON = localStorage.getItem('users') || '[]';\n      const users = JSON.parse(usersJSON);\n      const foundUser = users.find(u => u.email === email && u.password === password);\n      if (!foundUser) {\n        throw new Error('Invalid credentials');\n      }\n\n      // Create a safe user object (without password)\n      const safeUser = {\n        id: foundUser.id,\n        name: foundUser.name,\n        email: foundUser.email,\n        role: 'user'\n      };\n\n      // Create a session token\n      const token = btoa(`${safeUser.id}:${Date.now()}`);\n\n      // Store authentication data\n      localStorage.setItem('auth_token', token);\n      localStorage.setItem('auth_user', JSON.stringify(safeUser));\n\n      // Update state\n      setUser(safeUser);\n      setIsAuthenticated(true);\n      return true;\n    } catch (err) {\n      setError(err.message || 'Authentication failed');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Register function\n  const register = async (name, email, password) => {\n    setLoading(true);\n    setError(null);\n    try {\n      // Get existing users\n      const usersJSON = localStorage.getItem('users') || '[]';\n      const users = JSON.parse(usersJSON);\n\n      // Check if email already exists\n      if (users.some(u => u.email === email)) {\n        throw new Error('Email already registered');\n      }\n\n      // Create new user\n      const newUser = {\n        id: `user_${Date.now()}`,\n        name,\n        email,\n        password,\n        // In a real app, this would be hashed\n        role: 'user',\n        created_at: new Date().toISOString()\n      };\n\n      // Add to users array\n      users.push(newUser);\n\n      // Save back to localStorage\n      localStorage.setItem('users', JSON.stringify(users));\n\n      // In a real system with backend, you might automatically log them in\n      // For demo purposes, we'll require explicit login after registration\n\n      return true;\n    } catch (err) {\n      setError(err.message || 'Registration failed');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Logout function\n  const logout = () => {\n    // Clear auth data\n    localStorage.removeItem('auth_token');\n    localStorage.removeItem('auth_user');\n\n    // Update state\n    setUser(null);\n    setIsAuthenticated(false);\n  };\n\n  // Generate a system admin account (in a real app, this would be an admin-only function)\n  const generateAdminAccount = (name, role = 'admin') => {\n    // Generate a unique ID based on timestamp and random string\n    const uniqueId = `admin${Date.now().toString(36)}${Math.random().toString(36).substr(2, 5)}`;\n\n    // Generate a secure password with uppercase, lowercase, numbers, and special characters\n    const generatePassword = () => {\n      const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*';\n      let password = '';\n      for (let i = 0; i < 12; i++) {\n        password += chars.charAt(Math.floor(Math.random() * chars.length));\n      }\n      return password;\n    };\n    const password = generatePassword();\n\n    // Create the new admin\n    const newAdmin = {\n      id: uniqueId,\n      name,\n      password,\n      role,\n      email: `${name.toLowerCase().replace(/\\s+/g, '.')}@syntax-samurai.com`\n    };\n\n    // For demo, store in localStorage like a real user (but with admin role)\n    const usersJSON = localStorage.getItem('users') || '[]';\n    const users = JSON.parse(usersJSON);\n    users.push(newAdmin);\n    localStorage.setItem('users', JSON.stringify(users));\n    console.log('Generated new admin:', {\n      ...newAdmin,\n      password: '******'\n    });\n    console.log('Credentials for login:');\n    console.log(`Admin Email: ${newAdmin.email}`);\n    console.log(`Password: ${password}`);\n    return {\n      id: newAdmin.id,\n      name: newAdmin.name,\n      role: newAdmin.role,\n      email: newAdmin.email,\n      password // Only returned for demo purposes\n    };\n  };\n\n  // Get current user\n  const getCurrentUser = () => {\n    return user;\n  };\n\n  // Function to get auth header for API requests\n  const getAuthHeader = () => {\n    const token = localStorage.getItem('auth_token');\n    return token ? {\n      Authorization: `Bearer ${token}`\n    } : {};\n  };\n\n  // Context value\n  const value = {\n    isAuthenticated,\n    user,\n    loading,\n    error,\n    login,\n    logout,\n    register,\n    generateAdminAccount,\n    getCurrentUser,\n    getAuthHeader\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 233,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"Gnvi4J9qgHZsSXCwYatRFAm3nVM=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","useNavigate","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","isAuthenticated","setIsAuthenticated","user","setUser","loading","setLoading","error","setError","token","localStorage","getItem","userData","parsedUser","JSON","parse","err","removeItem","ADMIN_EMAIL","ADMIN_PASSWORD","login","email","password","adminUser","id","name","role","btoa","Date","now","setItem","stringify","usersJSON","users","foundUser","find","u","Error","safeUser","message","register","some","newUser","created_at","toISOString","push","logout","generateAdminAccount","uniqueId","toString","Math","random","substr","generatePassword","chars","i","charAt","floor","length","newAdmin","toLowerCase","replace","console","log","getCurrentUser","getAuthHeader","Authorization","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/XLR8/Tech_Support_Ticket_Prioritizer/web-ui/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\n// Create context\r\nconst AuthContext = createContext();\r\n\r\n// Custom hook to use the auth context\r\nexport const useAuth = () => useContext(AuthContext);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Check if user is authenticated on mount\r\n  useEffect(() => {\r\n    // Check localStorage for token\r\n    const token = localStorage.getItem('auth_token');\r\n    const userData = localStorage.getItem('auth_user');\r\n    \r\n    if (token && userData) {\r\n      try {\r\n        const parsedUser = JSON.parse(userData);\r\n        setUser(parsedUser);\r\n        setIsAuthenticated(true);\r\n      } catch (err) {\r\n        // Invalid user data, clear it\r\n        localStorage.removeItem('auth_token');\r\n        localStorage.removeItem('auth_user');\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  // Special admin credentials\r\n  const ADMIN_EMAIL = 'syntax@team.com';\r\n  const ADMIN_PASSWORD = '12345';\r\n\r\n  // Login function\r\n  const login = async (email, password) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      // Check for admin login first\r\n      if (email === ADMIN_EMAIL && password === ADMIN_PASSWORD) {\r\n        // Admin login successful\r\n        const adminUser = {\r\n          id: 'admin001',\r\n          name: 'Syntax Admin',\r\n          role: 'admin',\r\n          email: ADMIN_EMAIL\r\n        };\r\n        \r\n        // Create a session token\r\n        const token = btoa(`${adminUser.id}:${Date.now()}`);\r\n        \r\n        // Store authentication data\r\n        localStorage.setItem('auth_token', token);\r\n        localStorage.setItem('auth_user', JSON.stringify(adminUser));\r\n        \r\n        // Update state\r\n        setUser(adminUser);\r\n        setIsAuthenticated(true);\r\n        \r\n        return true;\r\n      }\r\n      \r\n      // Check for regular users in database (localStorage in this demo)\r\n      const usersJSON = localStorage.getItem('users') || '[]';\r\n      const users = JSON.parse(usersJSON);\r\n      \r\n      const foundUser = users.find(u => u.email === email && u.password === password);\r\n      \r\n      if (!foundUser) {\r\n        throw new Error('Invalid credentials');\r\n      }\r\n      \r\n      // Create a safe user object (without password)\r\n      const safeUser = {\r\n        id: foundUser.id,\r\n        name: foundUser.name,\r\n        email: foundUser.email,\r\n        role: 'user'\r\n      };\r\n      \r\n      // Create a session token\r\n      const token = btoa(`${safeUser.id}:${Date.now()}`);\r\n      \r\n      // Store authentication data\r\n      localStorage.setItem('auth_token', token);\r\n      localStorage.setItem('auth_user', JSON.stringify(safeUser));\r\n      \r\n      // Update state\r\n      setUser(safeUser);\r\n      setIsAuthenticated(true);\r\n      \r\n      return true;\r\n    } catch (err) {\r\n      setError(err.message || 'Authentication failed');\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Register function\r\n  const register = async (name, email, password) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      // Get existing users\r\n      const usersJSON = localStorage.getItem('users') || '[]';\r\n      const users = JSON.parse(usersJSON);\r\n      \r\n      // Check if email already exists\r\n      if (users.some(u => u.email === email)) {\r\n        throw new Error('Email already registered');\r\n      }\r\n      \r\n      // Create new user\r\n      const newUser = {\r\n        id: `user_${Date.now()}`,\r\n        name,\r\n        email,\r\n        password, // In a real app, this would be hashed\r\n        role: 'user',\r\n        created_at: new Date().toISOString()\r\n      };\r\n      \r\n      // Add to users array\r\n      users.push(newUser);\r\n      \r\n      // Save back to localStorage\r\n      localStorage.setItem('users', JSON.stringify(users));\r\n\r\n      // In a real system with backend, you might automatically log them in\r\n      // For demo purposes, we'll require explicit login after registration\r\n      \r\n      return true;\r\n    } catch (err) {\r\n      setError(err.message || 'Registration failed');\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Logout function\r\n  const logout = () => {\r\n    // Clear auth data\r\n    localStorage.removeItem('auth_token');\r\n    localStorage.removeItem('auth_user');\r\n    \r\n    // Update state\r\n    setUser(null);\r\n    setIsAuthenticated(false);\r\n  };\r\n\r\n  // Generate a system admin account (in a real app, this would be an admin-only function)\r\n  const generateAdminAccount = (name, role = 'admin') => {\r\n    // Generate a unique ID based on timestamp and random string\r\n    const uniqueId = `admin${Date.now().toString(36)}${Math.random().toString(36).substr(2, 5)}`;\r\n    \r\n    // Generate a secure password with uppercase, lowercase, numbers, and special characters\r\n    const generatePassword = () => {\r\n      const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*';\r\n      let password = '';\r\n      for (let i = 0; i < 12; i++) {\r\n        password += chars.charAt(Math.floor(Math.random() * chars.length));\r\n      }\r\n      return password;\r\n    };\r\n    \r\n    const password = generatePassword();\r\n    \r\n    // Create the new admin\r\n    const newAdmin = {\r\n      id: uniqueId,\r\n      name,\r\n      password,\r\n      role,\r\n      email: `${name.toLowerCase().replace(/\\s+/g, '.')}@syntax-samurai.com`\r\n    };\r\n    \r\n    // For demo, store in localStorage like a real user (but with admin role)\r\n    const usersJSON = localStorage.getItem('users') || '[]';\r\n    const users = JSON.parse(usersJSON);\r\n    users.push(newAdmin);\r\n    localStorage.setItem('users', JSON.stringify(users));\r\n    \r\n    console.log('Generated new admin:', { ...newAdmin, password: '******' });\r\n    console.log('Credentials for login:');\r\n    console.log(`Admin Email: ${newAdmin.email}`);\r\n    console.log(`Password: ${password}`);\r\n    \r\n    return {\r\n      id: newAdmin.id,\r\n      name: newAdmin.name,\r\n      role: newAdmin.role,\r\n      email: newAdmin.email,\r\n      password // Only returned for demo purposes\r\n    };\r\n  };\r\n\r\n  // Get current user\r\n  const getCurrentUser = () => {\r\n    return user;\r\n  };\r\n\r\n  // Function to get auth header for API requests\r\n  const getAuthHeader = () => {\r\n    const token = localStorage.getItem('auth_token');\r\n    return token ? { Authorization: `Bearer ${token}` } : {};\r\n  };\r\n\r\n  // Context value\r\n  const value = {\r\n    isAuthenticated,\r\n    user,\r\n    loading,\r\n    error,\r\n    login,\r\n    logout,\r\n    register,\r\n    generateAdminAccount,\r\n    getCurrentUser,\r\n    getAuthHeader\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}