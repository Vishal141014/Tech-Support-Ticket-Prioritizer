{"ast":null,"code":"import axios from 'axios';\n\n// Define API base URL - will use proxy in development\nconst API_URL = process.env.REACT_APP_API_URL || '';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add auth token to requests if available\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('auth_token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// API methods for tickets\nexport const ticketsAPI = {\n  // Get all tickets\n  getAll: () => api.get('/api/tickets'),\n  // Get a specific ticket\n  getById: id => api.get(`/api/tickets/${id}`),\n  // Submit a new ticket\n  create: ticketData => api.post('/api/tickets', ticketData),\n  // Update a ticket\n  update: (id, updates) => api.put(`/api/tickets/${id}`, updates),\n  // Delete a ticket\n  delete: id => api.delete(`/api/tickets/${id}`),\n  // Get ticket predictions (AI)\n  predict: (text, language = 'en') => api.post('/api/predict', {\n    text,\n    language\n  }),\n  // Process a batch of tickets\n  batch: tickets => api.post('/api/tickets/batch', {\n    tickets\n  })\n};\n\n// API methods for authentication\nexport const authAPI = {\n  // Login\n  login: credentials => api.post('/api/auth/login', credentials),\n  // Logout\n  logout: () => api.post('/api/auth/logout'),\n  // Get current user\n  getUser: () => api.get('/api/auth/user')\n};\n\n// API methods for admin dashboard\nexport const adminAPI = {\n  // Get dashboard stats\n  getStats: () => api.get('/api/admin/stats'),\n  // Get agents\n  getAgents: () => api.get('/api/admin/agents')\n};\nexport default api;","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","ticketsAPI","getAll","get","getById","id","ticketData","post","update","updates","put","delete","predict","text","language","batch","tickets","authAPI","login","credentials","logout","getUser","adminAPI","getStats","getAgents"],"sources":["D:/XLR8/Tech_Support_Ticket_Prioritizer/web-ui/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Define API base URL - will use proxy in development\r\nconst API_URL = process.env.REACT_APP_API_URL || '';\r\n\r\n// Create axios instance with default config\r\nconst api = axios.create({\r\n  baseURL: API_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Add auth token to requests if available\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('auth_token');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => Promise.reject(error)\r\n);\r\n\r\n// API methods for tickets\r\nexport const ticketsAPI = {\r\n  // Get all tickets\r\n  getAll: () => api.get('/api/tickets'),\r\n  \r\n  // Get a specific ticket\r\n  getById: (id) => api.get(`/api/tickets/${id}`),\r\n  \r\n  // Submit a new ticket\r\n  create: (ticketData) => api.post('/api/tickets', ticketData),\r\n  \r\n  // Update a ticket\r\n  update: (id, updates) => api.put(`/api/tickets/${id}`, updates),\r\n  \r\n  // Delete a ticket\r\n  delete: (id) => api.delete(`/api/tickets/${id}`),\r\n  \r\n  // Get ticket predictions (AI)\r\n  predict: (text, language = 'en') => \r\n    api.post('/api/predict', { text, language }),\r\n    \r\n  // Process a batch of tickets\r\n  batch: (tickets) => api.post('/api/tickets/batch', { tickets }),\r\n};\r\n\r\n// API methods for authentication\r\nexport const authAPI = {\r\n  // Login\r\n  login: (credentials) => api.post('/api/auth/login', credentials),\r\n  \r\n  // Logout\r\n  logout: () => api.post('/api/auth/logout'),\r\n  \r\n  // Get current user\r\n  getUser: () => api.get('/api/auth/user'),\r\n};\r\n\r\n// API methods for admin dashboard\r\nexport const adminAPI = {\r\n  // Get dashboard stats\r\n  getStats: () => api.get('/api/admin/stats'),\r\n  \r\n  // Get agents\r\n  getAgents: () => api.get('/api/admin/agents'),\r\n};\r\n\r\nexport default api; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,EAAE;;AAEnD;AACA,MAAMC,GAAG,GAAGL,KAAK,CAACM,MAAM,CAAC;EACvBC,OAAO,EAAEN,OAAO;EAChBO,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;EAChD,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,EACAK,KAAK,IAAKC,OAAO,CAACC,MAAM,CAACF,KAAK,CACjC,CAAC;;AAED;AACA,OAAO,MAAMG,UAAU,GAAG;EACxB;EACAC,MAAM,EAAEA,CAAA,KAAMhB,GAAG,CAACiB,GAAG,CAAC,cAAc,CAAC;EAErC;EACAC,OAAO,EAAGC,EAAE,IAAKnB,GAAG,CAACiB,GAAG,CAAC,gBAAgBE,EAAE,EAAE,CAAC;EAE9C;EACAlB,MAAM,EAAGmB,UAAU,IAAKpB,GAAG,CAACqB,IAAI,CAAC,cAAc,EAAED,UAAU,CAAC;EAE5D;EACAE,MAAM,EAAEA,CAACH,EAAE,EAAEI,OAAO,KAAKvB,GAAG,CAACwB,GAAG,CAAC,gBAAgBL,EAAE,EAAE,EAAEI,OAAO,CAAC;EAE/D;EACAE,MAAM,EAAGN,EAAE,IAAKnB,GAAG,CAACyB,MAAM,CAAC,gBAAgBN,EAAE,EAAE,CAAC;EAEhD;EACAO,OAAO,EAAEA,CAACC,IAAI,EAAEC,QAAQ,GAAG,IAAI,KAC7B5B,GAAG,CAACqB,IAAI,CAAC,cAAc,EAAE;IAAEM,IAAI;IAAEC;EAAS,CAAC,CAAC;EAE9C;EACAC,KAAK,EAAGC,OAAO,IAAK9B,GAAG,CAACqB,IAAI,CAAC,oBAAoB,EAAE;IAAES;EAAQ,CAAC;AAChE,CAAC;;AAED;AACA,OAAO,MAAMC,OAAO,GAAG;EACrB;EACAC,KAAK,EAAGC,WAAW,IAAKjC,GAAG,CAACqB,IAAI,CAAC,iBAAiB,EAAEY,WAAW,CAAC;EAEhE;EACAC,MAAM,EAAEA,CAAA,KAAMlC,GAAG,CAACqB,IAAI,CAAC,kBAAkB,CAAC;EAE1C;EACAc,OAAO,EAAEA,CAAA,KAAMnC,GAAG,CAACiB,GAAG,CAAC,gBAAgB;AACzC,CAAC;;AAED;AACA,OAAO,MAAMmB,QAAQ,GAAG;EACtB;EACAC,QAAQ,EAAEA,CAAA,KAAMrC,GAAG,CAACiB,GAAG,CAAC,kBAAkB,CAAC;EAE3C;EACAqB,SAAS,EAAEA,CAAA,KAAMtC,GAAG,CAACiB,GAAG,CAAC,mBAAmB;AAC9C,CAAC;AAED,eAAejB,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}